package com.winter.app.board.notice;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.winter.app.board.BoardFileVO;
import com.winter.app.board.BoardVO;
import com.winter.app.commons.Pager;
import com.winter.app.member.MemberVO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpSession;
import lombok.extern.slf4j.Slf4j;


@Tag(name = "공지사항", description = "공지사항 API")
@Controller
@RequestMapping(value = "/notice/*")
@Slf4j
public class NoticeController {
	@Autowired
	private NoticeService noticeService;
	
	@Value("${board.notice}")
	private String name;
	
	// 이 코드는 controller 안의 모든 메서드가 실행될 때마다 같이 실행됨
	@ModelAttribute("board")
	public String getBoard() {
		return name;
	}
	
//	@GetMapping("add") // /notice/add 로 get 요청을 받는다는 뜻
//	public void insert() throws Exception {
//		NoticeVO noticeVO = new NoticeVO();
//		noticeVO.setBoardTitle("title");
//		noticeVO.setBoardContents("contents");
//		noticeVO.setBoardWriter("writer");
//		
//		int result = noticeDAO.insert(noticeVO);
//	}
	
	@Operation
	@ApiResponse(responseCode = "200", description = "헬스 체크 조회 성공")
	@GetMapping("list")
	public String list(Pager pager, Model model) throws Exception {
	// Pager pager 앞에는 @ModelAttribute가 생략되어 있음 => 개발자가 model.addAttribute("pager", pager) 하지 않아도 알아서 해줌
		List<BoardVO> list = noticeService.list(pager);
		
//		model.addAttribute("board", "Notice");
//		model.addAttribute("pager", pager);
		model.addAttribute("list", list);
		
		System.out.println("notice/list");
		
		// return 해주지 않으면 url 경로를 보고 jsp를 찾아감
		return "board/list";
	}
	
	@GetMapping("detail")
	public String detail(BoardVO boardVO, Model model) throws Exception {
		NoticeVO noticeVO = (NoticeVO) noticeService.detail(boardVO);
		
		model.addAttribute("vo", noticeVO);
		
		System.out.println("notice/detail");
		
		return "board/detail";
	}
	
	@GetMapping("add")
	public String add() throws Exception {
		// 권한 검사 필요

		// 페이지 이동만 수행
		
		System.out.println("notice/add");
		
		return "board/add";
	}
	
//	@PostMapping("add")
//	public void add(BoardVO boardVO, HttpServletResponse res) throws Exception {
//		// DB에 데이터 삽입
//		int result = noticeService.add(boardVO);
//		
//		if(result != 0) {
//			System.out.println("notice/add: 성공");
//		} else {
//			System.out.println("notice/add: 실패");
//		}
//		
//		// list로 redirect....
//		res.sendRedirect("list");
//	}
	
	@PostMapping("add")
	public String add(BoardVO boardVO, MultipartFile[] attaches, HttpSession session) throws Exception {
		MemberVO memberVO = (MemberVO) session.getAttribute("member");
		boardVO.setBoardWriter(memberVO.getUsername());
		
		// 여기서도 권한 검사 필요(프론트는 보안이 안 되기 때문)... UPDATE, DELETE에서도 권한 검사 필요
		
		// 현재는 첨부파일 없이 글을 등록했을 때, attaches가 null인 상태로 noticeService.add()가 실행됨

//		log.info("{}", attaches.getContentType());
//		log.info("{}", attaches.getOriginalFilename());
//		log.info("{}", attaches.getSize()); // byte 단위로 표시됨
		
		// DB에 데이터 삽입
		int result = noticeService.add(boardVO, attaches);
		
		if(result != 0) {
			System.out.println("notice/add: 성공");
		} else {
			System.out.println("notice/add: 실패");
		}
		
		// list로 redirect....
		return "redirect:./list";
	}
	
	@GetMapping("update")
	public String update(NoticeVO noticeVO, Model model) throws Exception {	
		NoticeVO result = (NoticeVO) noticeService.detail(noticeVO);
		model.addAttribute("vo", result);
		
		System.out.println("notice/update");
		
		return "board/add";
	}
	
	@PostMapping("update")
	public String update(BoardVO boardVO, Model model, MultipartFile[] attaches) throws Exception {
		int result = noticeService.update(boardVO, attaches);
		String msg = "수정 실패";
		
		if(result != 0) {
			System.out.println("notice/update: 성공");
			msg = "수정 성공";
		} else {
			System.out.println("notice/update: 실패");			
		}
		
		String url = "./detail?boardNum=" + boardVO.getBoardNum();
		
		model.addAttribute("msg", msg);
		model.addAttribute("url", url);
		
//		return "redirect:./detail?boardNum=" + boardVO.getBoardNum();
		return "commons/result";
	}
	
	@PostMapping("delete")
	public String delete(BoardVO boardVO, Model model) throws Exception {
		int result = noticeService.delete(boardVO);
		String msg = "삭제 실패";
		
		if(result != 0) {
			System.out.println("notice/delete: 성공");
			msg = "삭제 성공";
		} else {
			System.out.println("notice/delete: 실패");
		}
		
		String url = "./list";
		
		model.addAttribute("msg", msg);
		model.addAttribute("url", url);
		
		return "commons/result";
	}
	
//	@GetMapping("fileDelete")
//	public String fileDelete(BoardFileVO boardFileVO, Model model) throws Exception {	
//		log.info("================= file delete ===================");
//		
//		log.info("fileNum: {}", boardFileVO.getFileNum());
//		
//		model.addAttribute("result", "hello");
//		
//		return "commons/ajaxResult";
//	}
	
	@PostMapping("fileDelete")
	@ResponseBody // 응답을 바로 요청시 정한 dataType의 형식으로 내보냄
	public int fileDelete(BoardFileVO boardFileVO, Model model) throws Exception {	
//		log.info("================= file delete ===================");
//		
//		log.info("fileNum: {}", boardFileVO.getFileNum());
		
//		model.addAttribute("result", 1);
//		
//		return "commons/ajaxResult";
		
		// @ResponseBody 를 사용하는 경우
		// jsp를 안 거치고 바로 응답 (응답 형식은 요청시 정한 dataType의 형식)
//		Pager pager = new Pager();
//		List<BoardVO> list = noticeService.list(pager);
//		
//		return list;
		
		int result = noticeService.fileDelete(boardFileVO);
		
		return result;
	}
	
	@GetMapping("fileDown")
	public String fileDown(BoardFileVO boardFileVO, Model model) throws Exception {
		boardFileVO = noticeService.fileDetail(boardFileVO);
		
		model.addAttribute("vo", boardFileVO);
		
		return "fileDownView";
		// 맨 먼저 이 이름을 가진 빈의 뷰를 찾음 (BeanCameViewResolver)
		// 없으면 이 이름.jsp 로 이동 (InteernalResourceViewResolver)
	}
	
	@PostMapping("boardFile")
	@ResponseBody
	public String boardFile(MultipartFile bf) throws Exception {
		log.info(bf.getOriginalFilename());
		
		String savedName = noticeService.boardFile(bf);
		log.info(savedName);
		
		return savedName;
	}
	
	@PostMapping("boardFileDelete")
	@ResponseBody
	public Boolean boardFileDelete(String fileName) throws Exception {
		log.info(fileName);
		
		boolean result = noticeService.boardFileDelete(fileName);
		log.info("{}", result);
		
		return result;
	}
}
