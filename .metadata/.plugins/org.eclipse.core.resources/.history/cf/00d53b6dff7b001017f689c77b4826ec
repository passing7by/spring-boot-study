package com.winter.app.member;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.BindingResult;
import org.springframework.web.multipart.MultipartFile;

import com.winter.app.commons.FileManager;
import com.winter.app.products.CartVO;
import com.winter.app.products.ProductVO;

@Service
@Transactional(rollbackFor = Exception.class) // 만약 rollback이 필요하면 이 어노테이션을 주면 됨 (클래스에 줄 수도, 메서드에 줄 수도 있음) (rollbackFor = Exception.class) 이 부분까지 넣어줘야 동작
public class MemberService {
	@Autowired
	private MemberDAO memberDAO;
	
	@Autowired
	private FileManager fileManager;
	
	@Value("${app.upload}")
	private String upload;
	
	@Value("${member}")
	private String member;
	
	// 검증 메서드
	public boolean hasMemberError(MemberVO memberVO, BindingResult bindingResult) throws Exception {
		boolean checkFalse = false;
		
		// check값이 true면 검증 실패
		// check값이 false면 검증 통과
		
		// 1. Annotation 검증
		checkFalse = bindingResult.hasErrors();
		
		// 2. 사용자 정의로 패스워드가 일치하는지 검증   
		if(!memberVO.getPassword().equals(memberVO.getPasswordCheck())) {
			checkFalse = true;
			bindingResult.rejectValue("passwordCheck", "member.password.notEqual");
		}
		
		// 3. ID 중복 검사
		if(memberDAO.checkUsername(memberVO) != null) {
			checkFalse = true;
			bindingResult.rejectValue("username", "member.username.duplicate");
		}
		
		return checkFalse;
	}
	
	public int join(MemberVO memberVO, MultipartFile attach) throws Exception {
		// 데이터를 받아와서 전처리/후처리
		
		System.out.println(attach.getOriginalFilename());
		
		// 회원 정보 저장
		int result = memberDAO.join(memberVO);
		
		// 프로필 파일 저장
		String fileName;
		if(attach == null || attach.isEmpty()) {
			return result;
		}
		// 이 아래로는 첨부 파일이 있어야 실행됨
		fileName = fileManager.fileSave(upload + member, attach);
		
		// 프로핑 파일 정보 저장
		ProfileVO profileVO = new ProfileVO();
		profileVO.setSaveName(fileName);
		profileVO.setOriName(attach.getOriginalFilename());
		profileVO.setUsername(memberVO.getUsername());
		
		// 첨부 파일이 있으면 던져지는 예외를 일부러 발생시켜봄
//		if (attach != null) {
//			throw new Exception();			
//		}
		// auto커밋이기 때문에 예외가 던져져도 members 테이블에 데이터가 들어감

		result = memberDAO.addProfile(profileVO);
		
		Map<String, Object> map = new HashMap<>();
		map.put("username", memberVO.getUsername());
		map.put("roleNum", 3); // 회원가입시에는 모두 일반회원으로, 회원권한을 조정하고싶으면 나중에 관리자가
		
		result = memberDAO.addRole(map);
		
		return result;
	};
	
	public MemberVO login(MemberVO memberVO) throws Exception {
		// TODO 강사님 코드 보기
		
		// 아이디가 존재하는지 확인
		if(memberDAO.checkUsername(memberVO) == null) {
			return null;
		}
		
		// 아이디가 존재하면 존재하는 아이디의 비밀번호와 입력한 비밀번호가 같은지 확인하여 멤버의 모든 정보 가지고 옴
		memberVO = memberDAO.detail(memberVO);
		
		return memberVO;
	}
	
	public MemberVO detail(MemberVO memberVO) throws Exception {
		
	}
	
	public int update(MemberVO memberVO) throws Exception {
		return memberDAO.update(memberVO);
	}
	
	public int cart(CartVO cartVO) throws Exception {
		return memberDAO.cart(cartVO);
	}
	
	public List<ProductVO> cartList(MemberVO memberVO) throws Exception {
		// TODO 페이징 처리 추가해야 함
		
		return memberDAO.cartList(memberVO);
	}
	
	public int cartDelete(CartVO[] checkedList) throws Exception {
		int result = 0;
		
		for (CartVO c : checkedList) {
			result = memberDAO.cartDelete(c);
		}
		
		return result;
	}
}
